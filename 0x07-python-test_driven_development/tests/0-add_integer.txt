The ``0-add_integer`` module
======================

Using ``add_integer(a, b=98)``
-------------------

import function from module:

	>>> add_integer = __import__('0-add_integer').add_integer

test one int argument:

	>>> add_integer(2)
	100

test one int argument and check default:

	>>> add_integer(0)
	98

test basic:

	>>> add_integer(1, 2)
	3

test one negative:
	>>> add_integer(2, -3)
	-1

test two float:

	>>> add_integer(2.9, 0.2)
	2

test negative floats:

	>> add_integer(-2.9, -0.2)
	2

test Floating and non-floating point values can be combined.

	>>> add_integer(2.5, -3)
	-1

    >>> add_integer("hello", 3)
    Traceback (most recent call last):
    TypeError: a must be an integer


    >>> add_integer(2, "hello")
    Traceback (most recent call last):
    TypeError: b must be an integer


    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer


    >>> add_integer(2.3, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

If both arguments are non-integers and non-floats, a TypeError message is only
printed for the first argument.


    >>> add_integer("hello", "there")
    Traceback (most recent call last):
    TypeError: a must be an integer
